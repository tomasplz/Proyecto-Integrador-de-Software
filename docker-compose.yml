version: '3.8'

services:
  # Servicio de Base de Datos PostgreSQL
  db:
    image: postgres:13
    container_name: postgres_horarios
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    # Variables de entorno para configurar la DB 
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    # Healthcheck: Verifica que la DB esté lista antes de que el backend intente conectarse.
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s # Espera inicial antes de empezar a chequear

  # Servicio de Backend (NestJS con PNPM)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_horarios
    # Depende de que la DB esté healthy. docker-compose esperará.
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NODE_ENV: development # O production, staging, etc.
      # JWT_SECRET: ${JWT_SECRET}
      # Mapeo de puertos: Host:Container. Expone el puerto interno 3000 (NestJS) a un puerto en tu máquina.
      # Puedes usar ${BACKEND_PORT} del .env
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}" # Mapea el puerto definido en .env
    # Montar el código fuente para desarrollo con hot-reloading (opcional, pero útil en dev)
    volumes:
      - ./backend:/app
      - /app/node_modules # Evita que el node_modules del host (si existe) sobreescriba el del contenedor
    # Comando para iniciar el backend (usando la versión compilada dist/main.js)
    # Esto sobreescribe el CMD del Dockerfile si está presente
    # Para desarrollo con hot-reloading, usarías: command: ["pnpm", "run", "start:dev"]
    command: [ "node", "dist/main" ]

  # Servicio de Frontend (React/Vite con Yarn)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_horarios
    # El frontend no depende directamente de la DB o el Backend para *construir*,
    # pero sí para hacer las llamadas API en runtime.
    # Para desarrollo local donde el frontend se conecta al backend, NO NECESITAS depends_on aquí
    # a menos que quieras que docker-compose espere. Si usas un proxy, depende del proxy.
    # depends_on:
    #   - backend # Si el frontend hace llamadas directas al backend
    #   - proxy # Si usas un proxy inverso
    # Mapeo de puertos: Host:Container. Expone el puerto 80 (Nginx) a un puerto en tu máquina.
    # Puedes usar ${FRONTEND_PORT} del .env
    ports:
      - "${FRONTEND_PORT}:80" # Mapea el puerto definido en .env al puerto 80 de Nginx
    # Si usas un proxy inverso (recomendado), el servicio 'frontend' podría no necesitar exponer puertos aquí,
    # el proxy se encargaría de servir sus archivos.

    # Optional: Reverse Proxy (e.g., Nginx)
    # Este servicio sirve los archivos estáticos del frontend y reenvía /api al backend.
    # proxy:
    #   image: nginx:stable-alpine # Imagen ligera de Nginx
    #   container_name: proxy_horarios
    #   ports:
    #     - "80:80" # Expone el proxy en el puerto 80 del host
    #   volumes:
    #     # Monta tu archivo de configuración de Nginx
    #     # Necesitarás crear un archivo nginx.conf configurado para servir los archivos estáticos
    #     # de /usr/share/nginx/html (donde el Dockerfile del frontend los copió)
    #     # y proxy_pass las rutas API (ej. /api) al servicio 'backend' (http://backend:${BACKEND_PORT})
    #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
    #     # Si el frontend service no expone su build, podrías montarlo aquí desde el host
    #     # - ./frontend/build:/usr/share/nginx/html:ro # Si no copiaste en el Dockerfile del frontend
    #   depends_on:
    #     - backend # El proxy necesita saber dónde está el backend
    #     - frontend # El proxy necesita saber dónde está el frontend (si no sirve directamente el build)

    # Definición de los volúmenes nombrados (para persistencia)
volumes:
  postgres_data: # Volumen para los datos de la DB
